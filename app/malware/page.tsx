"use client";

import React, { useState, useEffect } from 'react';
import { Shield, Search, Copy, ExternalLink } from 'lucide-react';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { toast } from 'sonner';

interface MalwareSample {
  md5: string;
  sha1: string;
  sha256: string;
  source: string;
  timestamp: string;
  file_type?: string;
}

export default function MalwarePage() {
  const [samples, setSamples] = useState<MalwareSample[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    const fetchMalwareSamples = async () => {
      try {
        setLoading(true);
        const response = await fetch('/api/malware/samples');
        
        if (!response.ok) {
          throw new Error(`Error: ${response.status}`);
        }
        
        const data = await response.json();
        setSamples(data.samples || []);
      } catch (err) {
        setError('Failed to fetch malware samples');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchMalwareSamples();
  }, []);

  const filteredSamples = samples.filter(sample => 
    sample.md5.includes(searchTerm) || 
    sample.sha1.includes(searchTerm) || 
    sample.sha256.includes(searchTerm) ||
    (sample.source && sample.source.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const copyToClipboard = (text: string, type: string) => {
    navigator.clipboard.writeText(text).then(
      () => {
        toast(`${type} copied to clipboard`);
      },
      () => {
        toast(`Failed to copy to clipboard`);
      }
    );
  };

  const formatDate = (timestamp: string) => {
    try {
      return new Date(parseInt(timestamp) * 1000).toLocaleString();
    } catch (e) {
      return timestamp;
    }
  };

  return (
    <div className="container py-8 max-w-6xl">
      <Card className="shadow-md">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl font-bold flex items-center gap-2">
                <Shield className="h-6 w-6 text-primary" />
                Malware Samples
              </CardTitle>
              <CardDescription>
                Latest malware samples from MalShare - updated every 24 hours
              </CardDescription>
            </div>
            <Badge variant="outline" className="ml-2">
              Data Source: MalShare
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-2 mb-6">
            <div className="relative flex-1">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search by hash or source..."
                className="pl-8"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <Button
              variant="outline"
              onClick={() => setSearchTerm('')}
              disabled={!searchTerm}
            >
              Clear
            </Button>
          </div>

          {loading ? (
            <div className="flex justify-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
          ) : error ? (
            <div className="text-center text-destructive py-8">
              <p>{error}</p>
              <p className="text-sm mt-2">Please check your API key configuration.</p>
            </div>
          ) : filteredSamples.length === 0 ? (
            <div className="text-center text-muted-foreground py-8">
              {searchTerm ? 'No samples match your search criteria.' : 'No malware samples available.'}
            </div>
          ) : (
            <div className="rounded-md border">
              <Table>
                <caption className="mt-4 text-sm text-muted-foreground">
                  {searchTerm 
                    ? `Showing ${filteredSamples.length} of ${samples.length} samples`
                    : `Showing ${samples.length} recent malware samples`
                  }
                </caption>
                <TableHeader>
                  <TableRow>
                    <TableHead>Sample Hash (MD5)</TableHead>
                    <TableHead>Source</TableHead>
                    <TableHead>Date Added</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredSamples.slice(0, 50).map((sample, index) => (
                    <TableRow key={sample.md5 || index}>
                      <TableCell className="font-mono text-xs">
                        {sample.md5}
                      </TableCell>
                      <TableCell>{sample.source || 'Unknown'}</TableCell>
                      <TableCell>{formatDate(sample.timestamp)}</TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-2">
                          <Button 
                            size="sm" 
                            variant="ghost"
                            onClick={() => copyToClipboard(sample.md5, 'MD5')}
                          >
                            <Copy className="h-4 w-4" />
                            <span className="sr-only">Copy MD5</span>
                          </Button>
                          <Button 
                            size="sm" 
                            variant="ghost"
                            onClick={() => copyToClipboard(sample.sha256, 'SHA256')}
                          >
                            <Copy className="h-4 w-4" />
                            <span className="sr-only">Copy SHA256</span>
                          </Button>
                          <a 
                            href={`https://malshare.com/sample.php?action=detail&hash=${sample.md5}`} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="inline-flex items-center justify-center h-8 w-8 rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
                          >
                            <ExternalLink className="h-4 w-4" />
                            <span className="sr-only">View details</span>
                          </a>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
        <CardFooter className="flex justify-between items-center border-t px-6 py-4">
          <div className="text-xs text-muted-foreground">
            <p>Data provided by <a href="https://malshare.com/" target="_blank" rel="noopener noreferrer" className="underline">MalShare</a></p>
            <p>Limited to recent samples from the past 24 hours</p>
          </div>
          <Button variant="outline" size="sm" onClick={() => window.location.reload()}>
            Refresh Data
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
} 