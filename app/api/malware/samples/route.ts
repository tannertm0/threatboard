import { NextResponse } from 'next/server';

// Types for MalShare API response
interface MalwareSample {
  md5: string;
  sha1: string;
  sha256: string;
  source: string;
  timestamp: string;
  file_type?: string;
}

// Sample data to use when API key is missing (for development)
const sampleData: MalwareSample[] = [
  {
    md5: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6",
    sha1: "1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t",
    sha256: "1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0t1u2v3w4x5y6z7a8b9c0d",
    source: "Sample Data",
    timestamp: (Date.now() / 1000).toString(),
  },
  {
    md5: "p6o5n4m3l2k1j0i9h8g7f6e5d4c3b2a1",
    sha1: "t0s9r8q7p6o5n4m3l2k1j0i9h8g7f6e5d4c3b2a1",
    sha256: "d0c9b8a7z6y5x4w3v2u1t0s9r8q7p6o5n4m3l2k1j0i9h8g7f6e5d4c3b2a1",
    source: "Demo Data",
    timestamp: (Date.now() / 1000 - 3600).toString(),
  },
  {
    md5: "5p6o7n8m9l0k1j2i3h4g5f6e7d8c9b0a",
    sha1: "0a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t",
    sha256: "0a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d",
    source: "Example",
    timestamp: (Date.now() / 1000 - 7200).toString(),
  }
];

// Cache the results to avoid hitting rate limits
let cachedData: MalwareSample[] | null = null;
let lastFetchTime: number = 0;
const CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours in milliseconds

export async function GET() {
  try {
    const now = Date.now();
    // Return cached data if it's still valid
    if (cachedData && now - lastFetchTime < CACHE_DURATION) {
      return NextResponse.json({ samples: cachedData }, { status: 200 });
    }

    // If no cached data or cache expired, fetch from MalShare
    const apiKey = process.env.MALSHARE_API_KEY;
    if (!apiKey) {
      console.warn("MalShare API key not found in environment variables. Using sample data.");
      // Use sample data if API key is not available
      cachedData = sampleData;
      lastFetchTime = now;
      return NextResponse.json({ samples: sampleData }, { status: 200 });
    }

    try {
      const response = await fetch(`https://malshare.com/api.php?api_key=${apiKey}&action=getlist`);
      
      if (!response.ok) {
        throw new Error(`MalShare API responded with status: ${response.status}`);
      }

      const data = await response.json();
      
      // Process and format the data as needed
      const formattedData: MalwareSample[] = Array.isArray(data) ? data : [];
      
      // Update cache
      cachedData = formattedData;
      lastFetchTime = now;
      
      return NextResponse.json({ samples: formattedData }, { status: 200 });
    } catch (fetchError) {
      console.error('Error fetching from MalShare API:', fetchError);
      // Fallback to sample data if API request fails
      cachedData = sampleData;
      lastFetchTime = now;
      return NextResponse.json({ samples: sampleData }, { status: 200 });
    }
  } catch (error) {
    console.error('Error in malware samples API route:', error);
    return NextResponse.json(
      { error: 'Failed to fetch malware samples', samples: sampleData },
      { status: 200 } // Return 200 with sample data even on error
    );
  }
} 