"use client";

import { useState, useEffect } from "react";
import { Loader2, ExternalLink, RefreshCw } from "lucide-react";
import { CopyButton } from "@/components/ui/copy-button";
import { Button } from "@/components/ui/button";
import { createClient } from '@supabase/supabase-js';

interface CVE {
  id: string;
  cve_id: string;
  summary: string;
  updated_date: string;
  published_date: string;
  cvss: number | null;
  reference_links: string[];
  affected_products: string[];
}

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
const supabase = createClient(supabaseUrl, supabaseAnonKey);

export function VulnerabilityBoard() {
  const [cves, setCves] = useState<CVE[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);

  const fetchCVEs = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // Fetch CVEs from Supabase
      const { data, error } = await supabase
        .from('cves')
        .select('*')
        .order('published_date', { ascending: false })
        .limit(30);
      
      if (error) {
        throw new Error(`Failed to fetch CVEs: ${error.message}`);
      }
      
      if (data && Array.isArray(data)) {
        setCves(data);
      } else {
        console.error("Unexpected response format:", data);
        setError("Unexpected data format from the database");
      }
    } catch (err) {
      console.error("Error fetching vulnerabilities:", err);
      setError(err instanceof Error ? err.message : "Failed to fetch vulnerabilities from database");
    } finally {
      setLoading(false);
    }
  };

  const refreshCVEs = async () => {
    try {
      setRefreshing(true);
      // Call our API endpoint to fetch and store the latest CVEs
      const response = await fetch('/api/fetch-cves');
      
      if (!response.ok) {
        throw new Error(`Failed to refresh CVEs: ${response.status}`);
      }
      
      // Refetch the CVEs from Supabase
      await fetchCVEs();
    } catch (err) {
      console.error("Error refreshing vulnerabilities:", err);
      setError(err instanceof Error ? err.message : "Failed to refresh vulnerabilities");
    } finally {
      setRefreshing(false);
    }
  };

  useEffect(() => {
    fetchCVEs();
  }, []);

  const formatDate = (dateString: string) => {
    if (!dateString) return "N/A";
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "short",
        day: "numeric",
      });
    } catch (e) {
      console.error("Error formatting date:", e);
      return dateString;
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin text-muted-foreground" />
        <span className="ml-2 text-muted-foreground">Loading vulnerabilities...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4 text-destructive bg-destructive/10 rounded-md">
        <p>Error loading vulnerability data: {error}</p>
        <p className="mt-2">
          Please try again later or check the database connection.
        </p>
        <Button onClick={fetchCVEs} className="mt-4">Retry</Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm text-muted-foreground">
            Showing the latest {cves.length} vulnerabilities from the CVE database
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button 
            size="sm" 
            variant="outline" 
            onClick={refreshCVEs} 
            disabled={refreshing}
            className="flex items-center gap-1"
          >
            <RefreshCw className={`h-3 w-3 ${refreshing ? 'animate-spin' : ''}`} />
            <span>{refreshing ? 'Refreshing...' : 'Refresh CVEs'}</span>
          </Button>
          <a
            href="https://github.com/adulau/cve-search"
            target="_blank"
            rel="noopener noreferrer"
            className="text-xs flex items-center gap-1 text-muted-foreground hover:text-foreground transition-colors"
          >
            <span>Powered by CIRCL CVE-Search API</span>
            <ExternalLink className="h-3 w-3" />
          </a>
        </div>
      </div>

      <div className="overflow-x-auto rounded-md border">
        <table className="w-full">
          <thead className="bg-muted">
            <tr>
              <th className="text-left p-3 font-medium">CVE ID</th>
              <th className="text-left p-3 font-medium">Description</th>
              <th className="text-left p-3 font-medium">Published</th>
              <th className="text-left p-3 font-medium">Updated</th>
              <th className="text-left p-3 font-medium">CVSS Score</th>
              <th className="text-left p-3 font-medium">Actions</th>
            </tr>
          </thead>
          <tbody>
            {cves.length === 0 ? (
              <tr>
                <td colSpan={6} className="p-4 text-center text-muted-foreground">
                  No vulnerabilities found. Click "Refresh CVEs" to fetch the latest data.
                </td>
              </tr>
            ) : (
              cves.map((cve) => (
                <tr key={cve.id} className="border-t hover:bg-muted/50">
                  <td className="p-3 font-mono text-sm">{cve.cve_id}</td>
                  <td className="p-3 max-w-md">
                    <div className="line-clamp-2">{cve.summary}</div>
                  </td>
                  <td className="p-3 whitespace-nowrap">
                    {formatDate(cve.published_date)}
                  </td>
                  <td className="p-3 whitespace-nowrap">
                    {formatDate(cve.updated_date)}
                  </td>
                  <td className="p-3">
                    {cve.cvss !== null ? (
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${
                          cve.cvss >= 7
                            ? "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300"
                            : cve.cvss >= 4
                            ? "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300"
                            : "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300"
                        }`}
                      >
                        {cve.cvss.toFixed(1)}
                      </span>
                    ) : (
                      <span className="text-muted-foreground">N/A</span>
                    )}
                  </td>
                  <td className="p-3">
                    <div className="flex gap-2">
                      <CopyButton value={cve.cve_id} />
                      <a
                        href={`https://nvd.nist.gov/vuln/detail/${cve.cve_id}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs px-2 py-1 rounded bg-secondary hover:bg-secondary/80 transition-colors"
                      >
                        NVD
                      </a>
                      <a
                        href={`https://cve.circl.lu/cve/${cve.cve_id}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs px-2 py-1 rounded bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300 hover:bg-purple-200 dark:hover:bg-purple-900/50 transition-colors"
                      >
                        CIRCL
                      </a>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
} 